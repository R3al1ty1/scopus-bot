from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram_dialog import DialogManager, StartMode
from database.requests import new_user, enough_requests

from dialogs import dialogs
from handlers.service_handlers import process_payments_command


router = Router()

class FSMSearching(StatesGroup):   
    searching = State()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /search
@router.message(Command(commands='search'), StateFilter(default_state))
async def process_search_command(message: Message, state: FSMContext, dialog_manager: DialogManager):
    chat_id = str(message.chat.id)
    username = str(message.chat.username)
    new_user(chat_id, username)
    if enough_requests(chat_id=chat_id):
        await dialog_manager.start(dialogs.FSMGeneral.choose_search, mode=StartMode.RESET_STACK)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã.\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Åüëáüèº")
        await process_payments_command(message)
        return

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ search
@router.callback_query(F.data == "search_button_pressed", StateFilter(default_state))
async def process_search_button(callback: CallbackQuery, state: FSMContext, dialog_manager: DialogManager):
    chat_id = str(callback.message.chat.id)
    username = str(callback.message.chat.username)
    new_user(chat_id, username)
    if enough_requests(chat_id=chat_id):
        await dialog_manager.start(dialogs.FSMGeneral.choose_search, mode=StartMode.RESET_STACK)
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å—ã.\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Åüëáüèº")
        await process_payments_command(callback.message)
        return



# @router.callback_query(lambda callback: callback.data.startswith("paginate"))
# async def handle_pagination(callback: CallbackQuery, manager: DialogManager):
#     """
#     –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
#     """
#     # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
#     page = int(callback.data.split(":")[1])

#     # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ dialog_data
#     items = manager.dialog_data.get('auths_found', [])

#     if not items:
#         await callback.message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
#         return

#     # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     keyboard = dialogs.create_pagination_keyboard(items, page)
#     await callback.message.edit_reply_markup(reply_markup=keyboard)


@router.callback_query(lambda callback: callback.data.startswith("select_item"))
async def handle_item_selection(callback: CallbackQuery, manager: DialogManager):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞.
    """
    _, page, index = callback.data.split(":")
    page, index = int(page), int(index)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ dialog_data
    items = manager.dialog_data.get('auths_found', [])
    if not items:
        await callback.message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    item_index = page * 5 + index
    if item_index >= len(items):
        await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    selected_item = items[item_index]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
    await callback.message.answer(
        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≤—Ç–æ—Ä–∞:\n"
             f"{selected_item['Author']}\n"
             f"–î–æ–∫—É–º–µ–Ω—Ç—ã: {selected_item['Documents']}\n"
             f"–ê—Ñ—Ñ–∏–ª–∏–∞—Ü–∏—è: {selected_item['Affiliation']}"
    )
