from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram_dialog import DialogManager

from utils.payments import buy_requests, check_payment_status, get_requests_amount
from utils.const import AMOUNTS_DCT
from database.requests import get_requests, add_requests, get_subscription_status, new_user


router = Router()

# –ö–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
search_button = InlineKeyboardButton(text='–ü–û–ò–°–ö', callback_data='search_button_pressed')
keyboard = InlineKeyboardMarkup(inline_keyboard=[[search_button]])

button_1 = InlineKeyboardButton(text='1', callback_data='button_1')
button_5 = InlineKeyboardButton(text='5', callback_data='button_5')
button_10 = InlineKeyboardButton(text='10', callback_data='button_10')
button_20 = InlineKeyboardButton(text='20', callback_data='button_20')
button_small = InlineKeyboardButton(text='SmallLab', callback_data='small')
button_medium = InlineKeyboardButton(text='MediumLab', callback_data='medium')
button_large = InlineKeyboardButton(text='LargeLab', callback_data='large')
button_sub = InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π', callback_data='subscription')

keyboard_payments = InlineKeyboardMarkup(inline_keyboard=[
    [button_1, button_5, button_10, button_20],
    [button_sub]
])


# –•–µ–Ω–¥–ª–µ—Ä—ã
@router.message(Command(commands='help'), StateFilter(default_state))
async def process_help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await message.answer(text="""
/search   - –ø–æ–∏—Å–∫
/payments - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
/support  - —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
/balance  - –±–∞–ª–∞–Ω—Å

–ö—Ä–∞—Ç–∫–∏–π –≥–∞–π–¥ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:
https://telegra.ph/Kak-ispolzovat-ScopusRuBot-12-04
"""
    )


@router.message(Command(commands='start'), StateFilter(default_state))
async def process_start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    chat_id = str(message.chat.id)
    username = str(message.chat.username)
    new_user(chat_id, username)
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –°–∫–æ–ø—É—Å.\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /search.\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ 7 –¥–Ω–µ–π –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!",
        reply_markup=keyboard
    )


@router.message(Command(commands='payments'), StateFilter(default_state))
async def process_payments_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payments."""
    await message.answer(
        text="""üí∞ –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:

–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π - 299 —Ä—É–±–ª–µ–π
1 –∑–∞–ø—Ä–æ—Å -  29 —Ä—É–±
5 –∑–∞–ø—Ä–æ—Å–æ–≤ -  149 —Ä—É–±
10 –∑–∞–ø—Ä–æ—Å–æ–≤ -  269 —Ä—É–±
20 –∑–∞–ø—Ä–æ—Å–æ–≤ -  449 —Ä—É–±

""",
        reply_markup=keyboard_payments
    )


@router.callback_query(F.data.in_(['button_1', 'button_5', 'button_10', 'button_20', 'small', 'medium', 'large', 'subscription']))
async def generate_payment(callback: CallbackQuery):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    amount = AMOUNTS_DCT[callback.data]
    payment_url, payment_id = buy_requests(amount, callback.message.chat.id)
    url = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞", url=payment_url)
    check = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_{payment_id}')
    keyboard_buy = InlineKeyboardMarkup(inline_keyboard=[[url, check]])

    await callback.message.answer(text="üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞!\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.",
                         reply_markup=keyboard_buy)


@router.callback_query(lambda x: "check" in x.data)
async def check_payment(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."""
    res = check_payment_status(callback.data.split('_')[-1])
    reqs = get_requests_amount(callback.data.split('_')[-1])
    if res:
        add_requests(callback.message.chat.id, reqs)
        if reqs == 0:
            await callback.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
        elif reqs == 1:
            await callback.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω 1 –∑–∞–ø—Ä–æ—Å.")
        else:
            await callback.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {reqs} –∑–∞–ø—Ä–æ—Å–æ–≤.")
    else:
        await callback.message.answer("‚åõÔ∏è –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞.")


@router.message(Command(commands='support'), StateFilter(default_state))
async def process_support_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support."""
    await message.answer(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @chadbugsy")


@router.message(Command(commands='balance'), StateFilter(default_state))
async def process_balance_command(message: Message):

    requests = get_requests(message.chat.id)
    sub_status, end_sub = get_subscription_status(message.chat.id)
    if sub_status == '–∞–∫—Ç–∏–≤–Ω–∞':
        if not requests:
            await message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_status} –¥–æ {end_sub}.\nüí≥ –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /payments.")
        else:
            await message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_status} –¥–æ {end_sub}.\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –í–∞—à–µ–º —Å—á–µ—Ç—É: {requests}\n\nüí≥ –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /payments.")
    else:
        if not requests:
            await message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {sub_status} {end_sub}.\nüí≥ –ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–æ–≤—É—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /payments.")
        else:
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É: {requests}.\nüí≥ –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /payments.")
