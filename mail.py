import os
import asyncio
import aiohttp
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database.models import Chat
from dotenv import load_dotenv

load_dotenv()

DATABASE_URL = f"postgresql://{os.getenv('DB-USER')}:{os.getenv('DB-PASSWORD')}@{os.getenv('DB-HOST')}:{os.getenv('DB-PORT')}/{os.getenv('DB-NAME')}"
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

BOT_TOKEN = os.getenv('BOT_TOKEN')
MESSAGE = """üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—Å–µ—Ö —Å –Ω–∞—Å—Ç—É–ø–∏–≤—à–∏–º 2025 –≥–æ–¥–æ–º! 

‚öôÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: Scopus –∏–∑–º–µ–Ω–∏–ª –ø–æ—Ä—è–¥–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –∏–∑-–∑–∞ —á–µ–≥–æ –±–æ—Ç –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –í —Å–≤—è–∑–∏ —Å —ç—Ç–∏–º –º—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞.

‚è≥ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ 2-3 –¥–Ω—è.

üí¨ –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –º—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –ª—é–±—ã–µ –ø–æ—Ç–µ—Ä–∏, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ –±—É–¥—É—â–µ–º!

üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"""
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

async def send_message(session, chat_id, text):
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        async with session.post(BASE_URL, json=payload) as response:
            if response.status != 200:
                print(f"–û—à–∏–±–∫–∞ {response.status} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            else:
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

async def main():
    session_db = Session()
    try:
        chat_ids = session_db.query(Chat.chat_id).all()
    finally:
        session_db.close()

    chat_ids = [chat_id[0] for chat_id in chat_ids]

    async with aiohttp.ClientSession() as session_http:
        tasks = [send_message(session_http, chat_id, MESSAGE) for chat_id in chat_ids]
        await asyncio.gather(*tasks)

if __name__ == "__main__":
    asyncio.run(main())
